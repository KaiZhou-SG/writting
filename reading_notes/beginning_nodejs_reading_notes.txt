Chapter 2: Understanding Node.js

1 Functions, most of the power of JavaScript comes from the way it handles the
  function type.
  1.1 Immediately executing function
    Execute a function immediately after defining it, simply by wrapping that
  function definition in parentheses(), and then add another pair of () to 
  invoke it:
    (function foo() {
      console.log('foo was executed!');
      })();

  1.2 The reason for having an immediately executing function is to create a 
    new variable scope. An if, else, while does not create a new variable scop-
    e in JavaScript:
    var foo = 123;
    if (true) {
      var foo = 456; // no new scope is created for foo, this only assign 456 to
                     // the existing foo defined at line one
    }
    console.log(foo); // 456

    ////////////////////////////////////

    var foo = 123;
    (function fun(){
      var foo = 456; // the function created a new scope(function scope for foo)
     })();
    console.log(foo); // 123

  1.3 The only recommended way of creating a new variable scope in JavaScript 
    in JavaScript is using a function. So, in order to create a new variable
    scope, we can use an immediately executing function:
    var foo = 123;
    if (true) {
      (function () {
        // create a new scope
        var foo = 456;
      })();
    } // end of that new scope containing foo = 456;
    console.log(foo); // 123, return to the scope where foo = 123

2 Anonymous function
  2.1 A function without a name is called an anonymous function. If a function
    is going to be used as a variable, it does not to be named.
  2.2 A programming language is said to have first-class functions if a 
    function can be treated the same way as any other variable in the language.

3 High-order function
  3.1 JavaScript allows us to assign functions to variables, so functions are
    also be able to be passed to other functions. Functions that take functions
    as arguments are called higher-order functions.

4 Closures
  4.1 Whenever we have a function defined inside another function, the inner
    function has access to the variables declared in the outer function.
  4.2 NOTICE!!! The inner function can access the variables from the outer 
    scope EVEN AFTER the outer function has returned. This is because the 
    variables are still bound in the inner function and not dependent on the
    outer function.

5 Understanding Node.js performance
  5.1 The I/O Scaling problem
    speed of reading data estimated in cpu cycles:
    L1 -> 3 cycles
    L2 -> 14 cycles
    RAM -> 250 cycles
    Disk -> 41,000,000 cycles
    Network -> 240,000,000 cycles
    and most web applications depend on reading data from disk or from another
    network source. When an Http request is received and we need to load data
    from a database, typically this request will be spent waiting for a disk to
    read or a network access call to complete.
    These open connections are pending requests consume server resources(memory
    and cpu). In order to handle a large number of requests from different 
    clients using the same web server, the I/O scaling problem occurs.
  5.2 Traditional web servers using a process per request
    5.2.1 Spin up a new process to handle every single web request is an 
      expensive operation, both in terms of cpu and memory. PHP does so.
    5.2.2 And a database read process can potentially take a long time, for the
      entire duration, we will have a process taking up CPU and memory while
      idling and waiting for the database reponse. Also, processes are slow to
      start and have a significant overhead in terms of RAM space. This does 
      not scale for very long and is the reason why modern web applications use
      a thread pool.
  5.3 Traditional web servers using a thread pool
    5.3.1 Modern servers use a thread from a thread pool to serve each request.
      Since we already have a few operating system threads created(hence a 
      thread pool), we do not pay the penalty of starting and stopping OS 
      processes. When a request comes in, we assign a thread to process this
      request. This thread is reserved for the request in the entire duration
      that the request is being handled.
    5.3.2 We saved the overhead of creating new processes and threads are ligh-
      ter than processes, this method is much better than the original server
      design. But again, there is wasting of RAM between threads, also OS needs
      to context switch between threads(even when they are idle), and this res-
      ults in wasted CPU resources.
  5.4 The Nginx way
    5.4.1 The idea that a single threaded server can perform better than a
      thread pool(save time of creating threads, and context swithch).
    5.4.2 Nginx is a single-threaded web server and can handle a tremendous
      amount of concurrent requests. 
    5.4.3 Comparing to web server using thread pools(such as Apache Http Server)
      single threaded web server responses faster and consumes less resources.
  5.5 Node.js performance secret
    5.5.1 There is a single execution thread in JavaScript. This is the way web
      browsers have traditionally worked. If you have a long-running operation,
      you must continue operation using a callback:
      function longRunningOperation(callback){
        // simulate a 3 seconds operation
        setTimeout(callback, 3000);
       }
    5.5.2 because of closures, we have access to the correct request after the
      long-running operation completes(see code examples on page 27), in that
      way we handled two requests on a single thread without breaking a sweat.
    5.5.3 Now, try to understand this statement: Node.js is highly performant,
      and it uses JavaScript because JavaScript supports first-class functions
      and closures.
    5.5.4 Although Node.js uses only one thread, it is really simple to use all
      CPU cores with a separate JavaScript process for each CPU core using
      Node.js, so no resources are wasted.
    5.5.5 It's also important to know that there are threads managed by Node.js
      at C level(such as for certain file system operations), but all the Java-
      Scrip executes in a single thread.
    5.5.6 All the above points are about the performance of Node.js

6 More Node.js Internals
  6.1 At the heart of Node.js is an event loop, just like GUI applications.
  6.2 Thread starvation
    6.2.1 The lack of availability of CPU resources is called starvation.   
    6.2.2 As Node.js uses the same way to process event loop just like GUI 
      application does, so it's not the best option if you need to do a high
      CPU task on a client request in a multiclient server environment. Howerv-
      er, most high CPU tasks should take place offline and are generally offl-
      oaded to a database server using things such as materialized views, map
      reduce, and so on.
    6.2.3 Most web applications access the results of these computations over
      the network, and this is where Node.js shines -- evented network I/O. 
      (because JavaScript has an async IO, JavaScript + Node.js(event loop)
      is a great fit for data-intensive applications).

7 The V8 JavaScript Engine
  7.1 All JavaScript inside Node.js is executed by the V8 JavaScript engine. V8
    came into being with the Google Chrome project. And V8 is the part of
    Chrome that runs the JavaScript when you visit a web page.
  7.2 V8 is fast, and Google engineers made it easy to integrate into other 
    projects, and that it is platform independent.

8 More JavaScript
  8.1 The JavaScript ecosystem around Node.js and JavaScript is huge, the Java-
    Script language has the greatest number of projects on GitHub.
  8.2 Node.js is the most popular server-side technology on GitHub.
  8.3 The 3 most popular repository overall on GitHub are:
    a) twbs/bootstrap
    b) jquery
    c) joyent/node(evented I/O for v8 JavaScript)

9 Revealing Module Pattern
  9.1 
